{"ast":null,"code":"import { takeLatest, put, all } from 'redux-saga/effects';\nimport USER_ACTION_TYPES from './user.types';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { googleSigninStart } from './user.actions';\n\nfunction* signInWithGoogle() {\n  try {\n    const userRef = yield auth.signInWithPopup(googleProvider);\n    console.log(userRef);\n  } catch (error) {\n    put();\n  }\n} //listen for GOOGLE_SIGNIN_START and trigger actual action in reducer\n\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(USER_ACTION_TYPES.GOOGLE_SIGNIN_START, signInWithGoogle);\n}\nexport function* userSagas() {\n  yield all([call(googleSigninStart)]);\n}","map":{"version":3,"sources":["/Users/samp/projects/jobSearch/udemy/complete-react/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","USER_ACTION_TYPES","auth","googleProvider","createUserProfileDocument","googleSigninStart","signInWithGoogle","userRef","signInWithPopup","console","log","error","onGoogleSignInStart","GOOGLE_SIGNIN_START","userSagas","call"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,QAAqC,oBAArC;AAEA,OAAOC,iBAAP,MAA8B,cAA9B;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,QAAgE,+BAAhE;AACA,SAASC,iBAAT,QAAkC,gBAAlC;;AAEA,UAAUC,gBAAV,GAA6B;AAC3B,MAAG;AACD,UAAMC,OAAO,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,cAArB,CAAtB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACD,GAHD,CAIA,OAAQI,KAAR,EAAgB;AACdZ,IAAAA,GAAG;AACJ;AACF,C,CAED;;;AACA,OAAO,UAAUa,mBAAV,GAAgC;AACrC,QAAMd,UAAU,CAACG,iBAAiB,CAACY,mBAAnB,EAAwCP,gBAAxC,CAAhB;AACD;AAED,OAAO,UAAUQ,SAAV,GAAsB;AAC3B,QAAMd,GAAG,CAAC,CACRe,IAAI,CAACV,iBAAD,CADI,CAAD,CAAT;AAGD","sourcesContent":["import { takeLatest, put, all } from 'redux-saga/effects';\n\nimport USER_ACTION_TYPES from './user.types';\n\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { googleSigninStart } from './user.actions';\n\nfunction* signInWithGoogle() {\n  try{\n    const userRef = yield auth.signInWithPopup(googleProvider);\n    console.log(userRef);\n  }\n  catch ( error ) {\n    put()\n  }\n}\n\n//listen for GOOGLE_SIGNIN_START and trigger actual action in reducer\nexport function* onGoogleSignInStart() {\n  yield takeLatest(USER_ACTION_TYPES.GOOGLE_SIGNIN_START, signInWithGoogle)\n}\n\nexport function* userSagas() {\n  yield all([\n    call(googleSigninStart),\n  ])\n}"]},"metadata":{},"sourceType":"module"}