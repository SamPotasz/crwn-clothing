{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { googleSignInStart } from './user.actions';\n\nfunction* signInWithGoogle() {\n  console.log(\"signing in with google in sagas\");\n\n  try {\n    const userRef = yield auth.signInWithPopup(googleProvider);\n    console.log(userRef);\n  } catch (error) {\n    put();\n  }\n} //listen for GOOGLE_SIGNIN_START and trigger actual action in reducer\n\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGNIN_START, signInWithGoogle);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart)]);\n}","map":{"version":3,"sources":["/Users/samp/projects/jobSearch/udemy/complete-react/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","googleSignInStart","signInWithGoogle","console","log","userRef","signInWithPopup","error","onGoogleSignInStart","GOOGLE_SIGNIN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,QAAgE,+BAAhE;AACA,SAASC,iBAAT,QAAkC,gBAAlC;;AAEA,UAAUC,gBAAV,GAA6B;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;;AACA,MAAG;AACD,UAAMC,OAAO,GAAG,MAAMP,IAAI,CAACQ,eAAL,CAAqBP,cAArB,CAAtB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACD,GAHD,CAIA,OAAQE,KAAR,EAAgB;AACdb,IAAAA,GAAG;AACJ;AACF,C,CAED;;;AACA,OAAO,UAAUc,mBAAV,GAAgC;AACrC,QAAMf,UAAU,CAACI,eAAe,CAACY,mBAAjB,EAAsCP,gBAAtC,CAAhB;AACD;AAED,OAAO,UAAUQ,SAAV,GAAsB;AAC3B,QAAMf,GAAG,CAAC,CACRC,IAAI,CAACY,mBAAD,CADI,CAAD,CAAT;AAGD","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport UserActionTypes from './user.types';\n\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { googleSignInStart } from './user.actions';\n\nfunction* signInWithGoogle() {\n  console.log(\"signing in with google in sagas\")\n  try{\n    const userRef = yield auth.signInWithPopup(googleProvider);\n    console.log(userRef);\n  }\n  catch ( error ) {\n    put()\n  }\n}\n\n//listen for GOOGLE_SIGNIN_START and trigger actual action in reducer\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGNIN_START, signInWithGoogle)\n}\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n  ])\n}"]},"metadata":{},"sourceType":"module"}