{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { SignInSuccess, SignInFailure, SignOutFailure, SignOutSuccess, SignUpFailure, SignUpSuccess } from './user.actions';\n/**\n * \n * @param {user object returned from async sign-in call} userAuth \n */\n\nfunction* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n\nfunction* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n\nfunction* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n\nfunction* signInFromSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  try {\n    yield getSnapshotFromUserAuth(user, additionalData);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n/**\n * Executed onCheckUserSession.\n */\n\n\nfunction* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return; //not signed in, return\n\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n/**\n * Generator for sign out start listener\n */\n\n\nfunction* startSignOut() {\n  try {\n    yield auth.signOut();\n    yield put(SignOutSuccess());\n  } catch (error) {\n    yield put(SignOutFailure(error));\n  }\n}\n/**\n * Generator for sign UP start listener\n */\n\n\nfunction* startSignUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(SignUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(SignUpFailure(error));\n  }\n} //listen for GOOGLE_SIGNIN_START and trigger actual action in reducer\n\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGNIN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGNIN_START, signInWithEmail);\n}\n/**\n * Listener for checking if a user auth persists in a session.\n * Triggered on app re-render.\n */\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n/**\n * Listener for user initiating sign-out process.\n * Triggered by clicking sign out button\n * Initiates API call\n */\n\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, startSignOut);\n}\n/**\n * Listener for user submitting the signup form.\n */\n\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, startSignUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInFromSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["/Users/samp/projects/jobSearch/udemy/complete-react/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","SignInSuccess","SignInFailure","SignOutFailure","SignOutSuccess","SignUpFailure","SignUpSuccess","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","signInFromSignUp","isUserAuthenticated","startSignOut","signOut","startSignUp","displayName","createUserWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGNIN_START","onEmailSignInStart","EMAIL_SIGNIN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport UserActionTypes from './user.types';\n\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { SignInSuccess, SignInFailure, SignOutFailure, SignOutSuccess, SignUpFailure, SignUpSuccess } from './user.actions';\n\n/**\n * \n * @param {user object returned from async sign-in call} userAuth \n */\nfunction* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n\n    yield put(\n      SignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })\n    );\n  }\n  catch ( error ) {\n    yield put(SignInFailure( error ));\n  }\n}\n\nfunction* signInWithGoogle() {\n  try{\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth( user )\n  }\n  catch ( error ) {\n    yield put(SignInFailure( error ));\n  }\n}\n\nfunction* signInWithEmail({ payload: { email, password }}) {\n   try {\n      const { user } = yield auth.signInWithEmailAndPassword( email, password );\n      yield getSnapshotFromUserAuth( user )\n    } \n    catch ( error ) {\n      yield put( SignInFailure ( error ));\n    }\n}\n\nfunction* signInFromSignUp({ payload: { user, additionalData }}) {\n  try {\n    yield getSnapshotFromUserAuth(user, additionalData)\n  }\n  catch ( error ) {\n    yield put( SignInFailure( error ));\n  }\n}\n\n/**\n * Executed onCheckUserSession.\n */\nfunction* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;  //not signed in, return\n    yield getSnapshotFromUserAuth( userAuth );\n  } \n  catch( error ) {\n    yield put( SignInFailure( error ));\n  }\n}\n\n/**\n * Generator for sign out start listener\n */\nfunction* startSignOut() {\n  try {\n    yield auth.signOut();\n    yield put( SignOutSuccess() );\n  }\n  catch ( error ){\n    yield put( SignOutFailure( error ));\n  }\n}\n\n/**\n * Generator for sign UP start listener\n */\nfunction* startSignUp({ payload: {email, password, displayName }}) {\n  try {\n    const { user } = yield auth.createUserWithEmailAndPassword( email, password );\n    yield put( SignUpSuccess({ user, additionalData: { displayName }}))\n  } \n  catch ( error ) {\n    yield put( SignUpFailure( error ))\n  }\n}\n\n//listen for GOOGLE_SIGNIN_START and trigger actual action in reducer\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGNIN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGNIN_START, signInWithEmail );\n}\n\n/**\n * Listener for checking if a user auth persists in a session.\n * Triggered on app re-render.\n */\nexport function* onCheckUserSession() {\n  yield takeLatest(\n    UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated\n  )\n}\n\n/**\n * Listener for user initiating sign-out process.\n * Triggered by clicking sign out button\n * Initiates API call\n */\nexport function* onSignOutStart() {\n  yield takeLatest( UserActionTypes.SIGN_OUT_START, startSignOut )\n}\n\n/**\n * Listener for user submitting the signup form.\n */\nexport function* onSignUpStart() {\n  yield takeLatest( UserActionTypes.SIGN_UP_START, startSignUp )\n}\n\nexport function* onSignUpSuccess() {\n  yield takeLatest( UserActionTypes.SIGN_UP_SUCCESS, signInFromSignUp )\n}\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n    call(onSignOutStart),\n    call(onSignUpStart),\n    call(onSignUpSuccess)\n  ])\n}"]},"metadata":{},"sourceType":"module"}