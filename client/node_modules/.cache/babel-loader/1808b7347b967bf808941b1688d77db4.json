{"ast":null,"code":"var _jsxFileName = \"/Users/samp/projects/jobSearch/udemy/complete-react/crwn-clothing/client/src/components/sign-in/sign-in.component.jsx\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\nimport './sign-in.styles.scss';\n\nconst SignIn = props => {\n  const [userCredentials, setCredentials] = useState({\n    email: '',\n    password: ''\n  });\n  const {\n    email,\n    password\n  } = userCredentials;\n  const {\n    googleSignInStart,\n    emailSignInStart\n  } = props;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setCredentials({ ...userCredentials,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sign-in\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, \"I already have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, \"Sign in with your email and password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    label: \"Email\",\n    value: email,\n    handleChange: handleChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    value: password,\n    label: \"Password\",\n    handleChange: handleChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    value: \"Submit Form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }, \"Sign In\"), /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: googleSignInStart,\n    isGoogleSignIn: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }, \"Sign In With Google\"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/Users/samp/projects/jobSearch/udemy/complete-react/crwn-clothing/client/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","props","userCredentials","setCredentials","email","password","handleSubmit","event","preventDefault","handleChange","value","name","target","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\n\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\n\nimport './sign-in.styles.scss';\n\nconst SignIn = (props) => {\n\n  const [ userCredentials, setCredentials ] = useState({ email: '', password: ''})\n  const {email, password} = userCredentials;\n\n  const { googleSignInStart, emailSignInStart } = props;\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    emailSignInStart( email, password );\n  }\n\n  const handleChange = (event) => {\n    const { value, name } = event.target;\n\n    setCredentials({...userCredentials, [name]: value })\n  }\n\n  return(\n  <div className='sign-in'>\n      <h2>I already have an account</h2>\n      <span>Sign in with your email and password</span>\n\n      <form onSubmit= { handleSubmit } >\n          \n          <FormInput \n              name=\"email\" \n              type=\"email\" \n              label='Email'\n              value={email} \n              handleChange= { handleChange }\n              required/>\n\n          <FormInput \n              name=\"password\" \n              type=\"password\" \n              value={password}\n              label='Password'\n              handleChange= { handleChange }\n              required/>\n\n          <div className=\"buttons\">\n              <CustomButton type=\"submit\" value='Submit Form'>Sign In</CustomButton>\n              {/* if type is not button, this will trigger a submit! */}\n              <CustomButton type='button' onClick={googleSignInStart} isGoogleSignIn>\n                  Sign In With Google</CustomButton>\n          </div>\n          \n      </form>\n  </div>\n)\n}\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({ email, password}))\n})\n\nexport default connect(null, mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}