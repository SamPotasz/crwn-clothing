{"ast":null,"code":"/**\n * hold all the sagas for our shop\n */\nimport SHOP_ACTION_TYPES from './shop.types'; //takeEvery listens for every action of a given type\n\nimport { takeEvery, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsError, fetchCollectionsSuccess } from './shop.actions';\n/**\n * Generator function that's executed by takeEvery\n */\n\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections'); //wait to get the results from collectionRef\n\n    const snapshot = yield collectionRef.get(); //want to yield this in case this takes longer than expected\n\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {} // collectionRef\n  //     .get()\n  //     .then(snapshot => {\n  //         const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //         dispatch(fetchCollectionsSuccess(collectionsMap));\n  // })\n  // .catch(error => dispatch(fetchCollectionsError(error.message)));\n\n}\n/**\n * Pause when a specific action type comes in.\n */\n\nexport function* fetchCollectionStartSaga() {\n  yield takeEvery(SHOP_ACTION_TYPES.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/samp/projects/jobSearch/udemy/complete-react/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["SHOP_ACTION_TYPES","takeEvery","call","put","firestore","convertCollectionsSnapshotToMap","fetchCollectionsError","fetchCollectionsSuccess","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","fetchCollectionStartSaga","FETCH_COLLECTIONS_START"],"mappings":"AAAA;;;AAIC,OAAOA,iBAAP,MAA8B,cAA9B,C,CAEA;;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAED,SAAQC,qBAAR,EAA+BC,uBAA/B,QAA8D,gBAA9D;AAEC;;;;AAGD,OAAO,UAAUC,qBAAV,GAAkC;AAErC,MAAG;AACC,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB,CADD,CAGC;;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CAJD,CAMC;;AACA,UAAMC,cAAc,GAAG,MAAMX,IAAI,CAACG,+BAAD,EAAkCM,QAAlC,CAAjC;AACA,UAAMR,GAAG,CAACI,uBAAuB,CAACM,cAAD,CAAxB,CAAT;AACH,GATD,CAUA,OAAOC,KAAP,EAAc,CAEb,CAdoC,CAgBrC;AACA;AACA;AACA;AACA;AACA;AACA;;AACH;AAEA;;;;AAGA,OAAO,UAAUC,wBAAV,GAAqC;AACzC,QAAMd,SAAS,CACXD,iBAAiB,CAACgB,uBADP,EAEXR,qBAFW,CAAf;AAGF","sourcesContent":["/**\n * hold all the sagas for our shop\n */\n\n import SHOP_ACTION_TYPES from './shop.types'\n\n //takeEvery listens for every action of a given type\n import { takeEvery, call, put } from 'redux-saga/effects'\n\n import { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n\nimport {fetchCollectionsError, fetchCollectionsSuccess } from './shop.actions'\n\n /**\n  * Generator function that's executed by takeEvery\n  */\nexport function* fetchCollectionsAsync() {\n    \n    try{\n        const collectionRef = firestore.collection('collections');\n    \n        //wait to get the results from collectionRef\n        const snapshot = yield collectionRef.get();\n        \n        //want to yield this in case this takes longer than expected\n        const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n        yield put(fetchCollectionsSuccess(collectionsMap));\n    } \n    catch (error) {\n\n    }\n\n    // collectionRef\n    //     .get()\n    //     .then(snapshot => {\n    //         const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //         dispatch(fetchCollectionsSuccess(collectionsMap));\n    // })\n    // .catch(error => dispatch(fetchCollectionsError(error.message)));\n}\n\n /**\n  * Pause when a specific action type comes in.\n  */\n export function* fetchCollectionStartSaga() {\n    yield takeEvery(\n        SHOP_ACTION_TYPES.FETCH_COLLECTIONS_START, \n        fetchCollectionsAsync)\n }"]},"metadata":{},"sourceType":"module"}