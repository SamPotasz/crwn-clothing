{"ast":null,"code":"export const addItemToCart = (prevCart, toAdd) => {\n  const matchingCartItem = prevCart.find(cartItem => cartItem.id === toAdd.id);\n\n  if (matchingCartItem) {\n    return prevCart.map(cartItem => cartItem.id === toAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  } //else, no matching item, this is a new item for the cart. set quantity.\n\n\n  return [...prevCart, { ...toAdd,\n    quantity: 1\n  }];\n};\nexport const clearItemFromCart = (prevCart, toClear) => {\n  const index = prevCart.indexOf(toClear);\n\n  if (index > -1) {\n    return prevCart.splice(index, 1);\n  }\n\n  return prevCart;\n};","map":{"version":3,"sources":["/Users/samp/projects/udemy/complete-react/crwn-clothing/src/redux/cart/cart.utils.js"],"names":["addItemToCart","prevCart","toAdd","matchingCartItem","find","cartItem","id","map","quantity","clearItemFromCart","toClear","index","indexOf","splice"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAC9C,QAAMC,gBAAgB,GAAGF,QAAQ,CAACG,IAAT,CACrBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBJ,KAAK,CAACI,EADb,CAAzB;;AAIA,MAAGH,gBAAH,EAAqB;AACjB,WAAOF,QAAQ,CAACM,GAAT,CAAaF,QAAQ,IACxBA,QAAQ,CAACC,EAAT,KAAgBJ,KAAK,CAACI,EAAtB,GAA2B,EACvB,GAAGD,QADoB;AAEvBG,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAFP,KAA3B,GAIGH,QALA,CAAP;AAMH,GAZ6C,CAc9C;;;AACA,SAAO,CAAC,GAAGJ,QAAJ,EAAc,EAAC,GAAGC,KAAJ;AAAWM,IAAAA,QAAQ,EAAE;AAArB,GAAd,CAAP;AACH,CAhBM;AAkBP,OAAO,MAAMC,iBAAiB,GAAG,CAACR,QAAD,EAAWS,OAAX,KAAuB;AACpD,QAAMC,KAAK,GAAGV,QAAQ,CAACW,OAAT,CAAiBF,OAAjB,CAAd;;AACA,MAAGC,KAAK,GAAG,CAAC,CAAZ,EAAe;AACX,WAAOV,QAAQ,CAACY,MAAT,CAAgBF,KAAhB,EAAuB,CAAvB,CAAP;AACH;;AAED,SAAOV,QAAP;AACH,CAPM","sourcesContent":["export const addItemToCart = (prevCart, toAdd) => {\n    const matchingCartItem = prevCart.find(\n        cartItem => cartItem.id === toAdd.id\n    );\n\n    if(matchingCartItem) {\n        return prevCart.map(cartItem => \n            cartItem.id === toAdd.id ? { \n                ...cartItem,\n                quantity: cartItem.quantity + 1\n             }\n             : cartItem )\n    }\n\n    //else, no matching item, this is a new item for the cart. set quantity.\n    return [...prevCart, {...toAdd, quantity: 1}]\n}\n\nexport const clearItemFromCart = (prevCart, toClear) => {\n    const index = prevCart.indexOf(toClear);\n    if(index > -1) {\n        return prevCart.splice(index, 1);\n    }\n\n    return prevCart;\n}"]},"metadata":{},"sourceType":"module"}