{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyBwidUBnpfCiRpex7-JfwRKVvRGOOhbocI\",\n  authDomain: \"crwn-db-e4f5e.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-e4f5e.firebaseio.com\",\n  projectId: \"crwn-db-e4f5e\",\n  storageBucket: \"crwn-db-e4f5e.appspot.com\",\n  messagingSenderId: \"56905897645\",\n  appId: \"1:56905897645:web:8f098960fe76e919359824\"\n};\nexport const createUserProfileDocument = async (userAuth, addlData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc('users/' + userAuth.uid);\n  const snapshot = await userRef.get(); //new user! put them in the db\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...addlData\n      });\n    } catch (err) {\n      console.error('error creating user', err.message);\n    }\n  }\n\n  return userRef;\n};\n/**\n * takes and array of objects and stores them on firebase with the given key\n * @param {string} collectionKey: name of collection to store on firebase\n * @param {array} objectsToAdd: array of objects to add to firebase\n */\n\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef); //need to do a batch-write to make sure all the objects get added even if internet fails\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n  });\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); //setup google auth\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/samp/projects/jobSearch/udemy/complete-react/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","addlData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","err","console","error","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","log","batch","forEach","obj","newDocRef","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,+BAFD;AAGXC,EAAAA,WAAW,EAAE,sCAHF;AAIXC,EAAAA,SAAS,EAAE,eAJA;AAKXC,EAAAA,aAAa,EAAE,2BALJ;AAMXC,EAAAA,iBAAiB,EAAE,aANR;AAOXC,EAAAA,KAAK,EAAE;AAPI,CAAf;AAUA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnE,MAAG,CAACD,QAAJ,EAAc;AAEd,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAc,WAAWJ,QAAQ,CAACK,GAAlC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAJmE,CAMnE;;AACA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAqB;AACjB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACA,YAAMV,OAAO,CAACW,GAAR,CAAY;AACdJ,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,SAHc;AAId,WAAGV;AAJW,OAAZ,CAAN;AAMH,KAPD,CAOE,OAAOa,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAc,qBAAd,EAAqCF,GAAG,CAACG,OAAzC;AACH;AACJ;;AAED,SAAOf,OAAP;AACH,CAxBM;AA0BP;;;;;;AAKA,OAAO,MAAMgB,yBAAyB,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiC;AACtE,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AACAJ,EAAAA,OAAO,CAACQ,GAAR,CAAYF,aAAZ,EAFsE,CAItE;;AACA,QAAMG,KAAK,GAAGrB,SAAS,CAACqB,KAAV,EAAd;AACAJ,EAAAA,YAAY,CAACK,OAAb,CAAqBC,GAAG,IAAI;AACxB,UAAMC,SAAS,GAAGN,aAAa,CAACjB,GAAd,EAAlB;AACH,GAFD;AAGH,CATM;AAWPd,QAAQ,CAACsC,aAAT,CAAuBrC,MAAvB;AAEA,OAAO,MAAMsC,IAAI,GAAGvC,QAAQ,CAACuC,IAAT,EAAb;AACP,OAAO,MAAM1B,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB,C,CAEP;;AACA,MAAM2B,QAAQ,GAAG,IAAIxC,QAAQ,CAACuC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAexC,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyBwidUBnpfCiRpex7-JfwRKVvRGOOhbocI\",\n    authDomain: \"crwn-db-e4f5e.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-e4f5e.firebaseio.com\",\n    projectId: \"crwn-db-e4f5e\",\n    storageBucket: \"crwn-db-e4f5e.appspot.com\",\n    messagingSenderId: \"56905897645\",\n    appId: \"1:56905897645:web:8f098960fe76e919359824\"\n};\n\nexport const createUserProfileDocument = async (userAuth, addlData) => {\n    if(!userAuth) return;\n\n    const userRef = firestore.doc('users/' + userAuth.uid);\n    const snapshot = await userRef.get();\n    \n    //new user! put them in the db\n    if(!snapshot.exists) {\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await userRef.set({\n                displayName, \n                email,\n                createdAt,\n                ...addlData\n            })\n        } catch (err) {\n            console.error('error creating user', err.message);\n        }\n    }\n\n    return userRef;\n}\n\n/**\n * takes and array of objects and stores them on firebase with the given key\n * @param {string} collectionKey: name of collection to store on firebase\n * @param {array} objectsToAdd: array of objects to add to firebase\n */\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey);\n    console.log(collectionRef);\n\n    //need to do a batch-write to make sure all the objects get added even if internet fails\n    const batch = firestore.batch();\n    objectsToAdd.forEach(obj => {\n        const newDocRef = collectionRef.doc();\n    })\n}\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n//setup google auth\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}