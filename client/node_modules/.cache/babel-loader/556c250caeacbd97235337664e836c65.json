{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { SignInSuccess, SignInFailure } from './user.actions';\n/**\n * \n * @param {user object returned from async sign-in call} userAuth \n */\n\nfunction* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n\nfunction* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n\nfunction* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n/**\n * Executed onCheckUserSession.\n */\n\n\nfunction* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return; //not signed in, return\n\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n} //listen for GOOGLE_SIGNIN_START and trigger actual action in reducer\n\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGNIN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGNIN_START, signInWithEmail);\n}\n/**\n * Listener for checking if a user auth persists in a session.\n * Triggered on app re-render.\n */\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n/**\n * Listener for user initiating sign-out process.\n * Triggered by clicking sign out button\n * Initiates API call\n */\n\nexport function* onSignOutStart() {}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["/Users/samp/projects/jobSearch/udemy/complete-react/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","SignInSuccess","SignInFailure","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGNIN_START","onEmailSignInStart","EMAIL_SIGNIN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,EAA0DC,cAA1D,QAAgF,+BAAhF;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA;;;;;AAIA,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AAC1C,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACI,yBAAD,EAA4BK,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AAEA,UAAMd,GAAG,CACPQ,aAAa,CAAC;AAAEO,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CADN,CAAT;AAGD,GAPD,CAQA,OAAQC,KAAR,EAAgB;AACd,UAAMjB,GAAG,CAACS,aAAa,CAAEQ,KAAF,CAAd,CAAT;AACD;AACF;;AAED,UAAUC,gBAAV,GAA6B;AAC3B,MAAG;AACD,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMf,IAAI,CAACgB,eAAL,CAAqBf,cAArB,CAAvB;AACA,UAAMK,uBAAuB,CAAES,IAAF,CAA7B;AACD,GAHD,CAIA,OAAQF,KAAR,EAAgB;AACd,UAAMjB,GAAG,CAACS,aAAa,CAAEQ,KAAF,CAAd,CAAT;AACD;AACF;;AAED,UAAUI,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA2D;AACxD,MAAI;AACD,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMf,IAAI,CAACqB,0BAAL,CAAiCF,KAAjC,EAAwCC,QAAxC,CAAvB;AACA,UAAMd,uBAAuB,CAAES,IAAF,CAA7B;AACD,GAHF,CAIC,OAAQF,KAAR,EAAgB;AACd,UAAMjB,GAAG,CAAES,aAAa,CAAGQ,KAAH,CAAf,CAAT;AACD;AACJ;AAED;;;;;AAGA,UAAUS,mBAAV,GAAgC;AAC9B,MAAI;AACF,UAAMf,QAAQ,GAAG,MAAMJ,cAAc,EAArC;AACA,QAAI,CAACI,QAAL,EAAe,OAFb,CAEsB;;AACxB,UAAMD,uBAAuB,CAAEC,QAAF,CAA7B;AACD,GAJD,CAKA,OAAOM,KAAP,EAAe;AACb,UAAMjB,GAAG,CAAES,aAAa,CAAEQ,KAAF,CAAf,CAAT;AACD;AACF,C,CAED;;;AACA,OAAO,UAAUU,mBAAV,GAAgC;AACrC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,mBAAjB,EAAsCV,gBAAtC,CAAhB;AACD;AAED,OAAO,UAAUW,kBAAV,GAA+B;AACpC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,kBAAjB,EAAqCT,eAArC,CAAhB;AACD;AAED;;;;;AAIA,OAAO,UAAUU,kBAAV,GAA+B;AACpC,QAAMhC,UAAU,CACdI,eAAe,CAAC6B,kBADF,EACsBN,mBADtB,CAAhB;AAGD;AAED;;;;;;AAKA,OAAO,UAAUO,cAAV,GAA2B,CAEjC;AAED,OAAO,UAAUC,SAAV,GAAsB;AAC3B,QAAMjC,GAAG,CAAC,CACRC,IAAI,CAACyB,mBAAD,CADI,EAERzB,IAAI,CAAC2B,kBAAD,CAFI,EAGR3B,IAAI,CAAC6B,kBAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport UserActionTypes from './user.types';\n\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { SignInSuccess, SignInFailure } from './user.actions';\n\n/**\n * \n * @param {user object returned from async sign-in call} userAuth \n */\nfunction* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n\n    yield put(\n      SignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })\n    );\n  }\n  catch ( error ) {\n    yield put(SignInFailure( error ));\n  }\n}\n\nfunction* signInWithGoogle() {\n  try{\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth( user )\n  }\n  catch ( error ) {\n    yield put(SignInFailure( error ));\n  }\n}\n\nfunction* signInWithEmail({ payload: { email, password }}) {\n   try {\n      const { user } = yield auth.signInWithEmailAndPassword( email, password );\n      yield getSnapshotFromUserAuth( user )\n    } \n    catch ( error ) {\n      yield put( SignInFailure ( error ));\n    }\n}\n\n/**\n * Executed onCheckUserSession.\n */\nfunction* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;  //not signed in, return\n    yield getSnapshotFromUserAuth( userAuth );\n  } \n  catch( error ) {\n    yield put( SignInFailure( error ));\n  }\n}\n\n//listen for GOOGLE_SIGNIN_START and trigger actual action in reducer\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGNIN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGNIN_START, signInWithEmail );\n}\n\n/**\n * Listener for checking if a user auth persists in a session.\n * Triggered on app re-render.\n */\nexport function* onCheckUserSession() {\n  yield takeLatest(\n    UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated\n  )\n}\n\n/**\n * Listener for user initiating sign-out process.\n * Triggered by clicking sign out button\n * Initiates API call\n */\nexport function* onSignOutStart() {\n\n}\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n  ])\n}"]},"metadata":{},"sourceType":"module"}