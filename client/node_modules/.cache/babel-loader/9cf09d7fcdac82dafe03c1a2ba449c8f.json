{"ast":null,"code":"/**\n * hold all the sagas for our shop\n */\nimport SHOP_ACTION_TYPES from './shop.types'; //takeEvery listens for every action of a given type\n//takeLatest cancels calls that came in since last firing\n\nimport { takeLatest, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { all } from 'redux-saga/effects';\nimport { fetchCollectionsError, fetchCollectionsSuccess } from './shop.actions';\n/**\n * Generator function that's executed by takeEvery\n */\n\nfunction* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections'); //wait to get the results from collectionRef\n\n    const snapshot = yield collectionRef.get(); //want to yield this in case this takes longer than expected\n\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap)); //equiv to dispatch\n  } catch (error) {\n    yield put(fetchCollectionsError(error.message));\n  } // collectionRef\n  //     .get()\n  //     .then(snapshot => {\n  //         const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //         dispatch(fetchCollectionsSuccess(collectionsMap));\n  // })\n  // .catch(error => dispatch(fetchCollectionsError(error.message)));\n\n}\n\nexport function* fetchCollectionStartSaga() {\n  yield takeLatest(SHOP_ACTION_TYPES.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\nexport function* shopSagas() {\n  yield all([call(fetchCollectionStartSaga)]);\n}","map":{"version":3,"sources":["/Users/samp/projects/jobSearch/udemy/complete-react/crwn-clothing/client/src/redux/shop/shop.sagas.js"],"names":["SHOP_ACTION_TYPES","takeLatest","call","put","firestore","convertCollectionsSnapshotToMap","all","fetchCollectionsError","fetchCollectionsSuccess","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionStartSaga","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA;;;AAIA,OAAOA,iBAAP,MAA8B,cAA9B,C,CAEA;AACA;;AACA,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SAASC,GAAT,QAAoB,oBAApB;AAEA,SAAQC,qBAAR,EAA+BC,uBAA/B,QAA8D,gBAA9D;AAEC;;;;AAGD,UAAUC,qBAAV,GAAkC;AACjC,MAAG;AACF,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB,CADE,CAGF;;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CAJE,CAMF;;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAACG,+BAAD,EAAkCO,QAAlC,CAAjC;AACA,UAAMT,GAAG,CAACK,uBAAuB,CAACM,cAAD,CAAxB,CAAT,CARE,CAQkD;AACpD,GATD,CAUA,OAAOC,KAAP,EAAc;AACb,UAAMZ,GAAG,CAACI,qBAAqB,CAACQ,KAAK,CAACC,OAAP,CAAtB,CAAT;AACA,GAbgC,CAejC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAED,OAAO,UAAUC,wBAAV,GAAqC;AAC3C,QAAMhB,UAAU,CACfD,iBAAiB,CAACkB,uBADH,EAEfT,qBAFe,CAAhB;AAGA;AAED,OAAO,UAAUU,SAAV,GAAsB;AAC3B,QAAMb,GAAG,CAAC,CACRJ,IAAI,CAACe,wBAAD,CADI,CAAD,CAAT;AAGD","sourcesContent":["/**\n * hold all the sagas for our shop\n */\n\nimport SHOP_ACTION_TYPES from './shop.types'\n\n//takeEvery listens for every action of a given type\n//takeLatest cancels calls that came in since last firing\nimport { takeLatest, call, put } from 'redux-saga/effects'\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n\nimport { all } from 'redux-saga/effects'\n\nimport {fetchCollectionsError, fetchCollectionsSuccess } from './shop.actions'\n\n /**\n  * Generator function that's executed by takeEvery\n  */\nfunction* fetchCollectionsAsync() {\n\ttry{\n\t\tconst collectionRef = firestore.collection('collections');\n\n\t\t//wait to get the results from collectionRef\n\t\tconst snapshot = yield collectionRef.get();\n\t\t\n\t\t//want to yield this in case this takes longer than expected\n\t\tconst collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n\t\tyield put(fetchCollectionsSuccess(collectionsMap)); //equiv to dispatch\n\t} \n\tcatch (error) {\n\t\tyield put(fetchCollectionsError(error.message));\n\t}\n\n\t// collectionRef\n\t//     .get()\n\t//     .then(snapshot => {\n\t//         const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n\t//         dispatch(fetchCollectionsSuccess(collectionsMap));\n\t// })\n\t// .catch(error => dispatch(fetchCollectionsError(error.message)));\n}\n\nexport function* fetchCollectionStartSaga() {\n\tyield takeLatest(\n\t\tSHOP_ACTION_TYPES.FETCH_COLLECTIONS_START, \n\t\tfetchCollectionsAsync)\n}\n\nexport function* shopSagas() {\n  yield all([\n    call(fetchCollectionStartSaga),\n  ])\n}"]},"metadata":{},"sourceType":"module"}