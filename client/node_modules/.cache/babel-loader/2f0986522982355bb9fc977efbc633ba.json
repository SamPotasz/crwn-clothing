{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyBwidUBnpfCiRpex7-JfwRKVvRGOOhbocI\",\n  authDomain: \"crwn-db-e4f5e.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-e4f5e.firebaseio.com\",\n  projectId: \"crwn-db-e4f5e\",\n  storageBucket: \"crwn-db-e4f5e.appspot.com\",\n  messagingSenderId: \"56905897645\",\n  appId: \"1:56905897645:web:8f098960fe76e919359824\"\n};\nexport const createUserProfileDocument = async (userAuth, addlData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc('users/' + userAuth.uid);\n  const snapshot = await userRef.get(); //new user! put them in the db\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...addlData\n      });\n    } catch (err) {\n      console.error('error creating user', err.message);\n    }\n  }\n\n  return userRef;\n};\n/**\n * takes and array of objects and stores them on firebase with the given key\n * @param {string} collectionKey: name of collection to store on firebase\n * @param {array} objectsToAdd: array of objects to add to firebase\n */\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); // console.log(collectionRef);\n  //need to do a batch-write to make sure all the objects get added even if internet fails\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(); //get a blank document in this collection\n\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\n/**\n * \n * @param {array} collections \n */\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  }); //create an object keyed by title\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n}; //mimicking backend until we have one\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth); //if succeed, resolve to returned userAuth\n    }, reject); //if fails, reject\n  });\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); //setup google auth\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/samp/projects/jobSearch/udemy/complete-react/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","addlData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","err","console","error","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","initializeApp","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyBwidUBnpfCiRpex7-JfwRKVvRGOOhbocI\",\n    authDomain: \"crwn-db-e4f5e.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-e4f5e.firebaseio.com\",\n    projectId: \"crwn-db-e4f5e\",\n    storageBucket: \"crwn-db-e4f5e.appspot.com\",\n    messagingSenderId: \"56905897645\",\n    appId: \"1:56905897645:web:8f098960fe76e919359824\"\n};\n\nexport const createUserProfileDocument = async (userAuth, addlData) => {\n    if(!userAuth) return;\n\n    const userRef = firestore.doc('users/' + userAuth.uid);\n    const snapshot = await userRef.get();\n    \n    //new user! put them in the db\n    if(!snapshot.exists) {\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await userRef.set({\n                displayName, \n                email,\n                createdAt,\n                ...addlData\n            })\n        } catch (err) {\n            console.error('error creating user', err.message);\n        }\n    }\n\n    return userRef;\n}\n\n/**\n * takes and array of objects and stores them on firebase with the given key\n * @param {string} collectionKey: name of collection to store on firebase\n * @param {array} objectsToAdd: array of objects to add to firebase\n */\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey);\n    // console.log(collectionRef);\n\n    //need to do a batch-write to make sure all the objects get added even if internet fails\n    const batch = firestore.batch();\n    objectsToAdd.forEach(obj => {\n        const newDocRef = collectionRef.doc();  //get a blank document in this collection\n        batch.set(newDocRef, obj);\n    })\n\n    return await batch.commit();\n}\n\n/**\n * \n * @param {array} collections \n */\nexport const convertCollectionsSnapshotToMap = (collections) => {\n    const transformedCollection = collections.docs.map( doc => {\n        const { title, items } = doc.data();\n        return {\n            routeName: encodeURI(title.toLowerCase()),\n            id: doc.id,\n            title, \n            items\n        }\n    });\n    \n    //create an object keyed by title\n    return transformedCollection.reduce((accumulator, collection) => {\n        accumulator[collection.title.toLowerCase()] = collection;\n        return accumulator;\n    },  {});\n};\n\n//mimicking backend until we have one\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged( userAuth => {\n      unsubscribe();\n      resolve( userAuth );  //if succeed, resolve to returned userAuth\n    }, reject ) //if fails, reject\n  })\n}\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n//setup google auth\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}